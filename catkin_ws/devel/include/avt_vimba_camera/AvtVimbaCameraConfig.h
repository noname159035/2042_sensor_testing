//#line 2 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the avt_vimba_camera package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __avt_vimba_camera__AVTVIMBACAMERACONFIG_H__
#define __avt_vimba_camera__AVTVIMBACAMERACONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace avt_vimba_camera
{
  class AvtVimbaCameraConfigStatics;

  class AvtVimbaCameraConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      virtual ~AbstractParamDescription() = default;

      virtual void clamp(AvtVimbaCameraConfig &config, const AvtVimbaCameraConfig &max, const AvtVimbaCameraConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const AvtVimbaCameraConfig &config1, const AvtVimbaCameraConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, AvtVimbaCameraConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const AvtVimbaCameraConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, AvtVimbaCameraConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const AvtVimbaCameraConfig &config) const = 0;
      virtual void getValue(const AvtVimbaCameraConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T AvtVimbaCameraConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T AvtVimbaCameraConfig::* field;

      virtual void clamp(AvtVimbaCameraConfig &config, const AvtVimbaCameraConfig &max, const AvtVimbaCameraConfig &min) const override
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const AvtVimbaCameraConfig &config1, const AvtVimbaCameraConfig &config2) const override
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, AvtVimbaCameraConfig &config) const override
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const AvtVimbaCameraConfig &config) const override
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, AvtVimbaCameraConfig &config) const override
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const AvtVimbaCameraConfig &config) const override
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const AvtVimbaCameraConfig &config, boost::any &val) const override
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      virtual ~AbstractGroupDescription() = default;

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, AvtVimbaCameraConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, AvtVimbaCameraConfig &top) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const override
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<AvtVimbaCameraConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(AvtVimbaCameraConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("acquisition_mode"==(*_i)->name){acquisition_mode = boost::any_cast<std::string>(val);}
        if("acquisition_rate"==(*_i)->name){acquisition_rate = boost::any_cast<double>(val);}
        if("acquisition_rate_enable"==(*_i)->name){acquisition_rate_enable = boost::any_cast<bool>(val);}
        if("trigger_source"==(*_i)->name){trigger_source = boost::any_cast<std::string>(val);}
        if("trigger_mode"==(*_i)->name){trigger_mode = boost::any_cast<std::string>(val);}
        if("trigger_selector"==(*_i)->name){trigger_selector = boost::any_cast<std::string>(val);}
        if("trigger_activation"==(*_i)->name){trigger_activation = boost::any_cast<std::string>(val);}
        if("trigger_delay"==(*_i)->name){trigger_delay = boost::any_cast<double>(val);}
        if("action_device_key"==(*_i)->name){action_device_key = boost::any_cast<int>(val);}
        if("action_group_key"==(*_i)->name){action_group_key = boost::any_cast<int>(val);}
        if("action_group_mask"==(*_i)->name){action_group_mask = boost::any_cast<int>(val);}
        if("exposure"==(*_i)->name){exposure = boost::any_cast<double>(val);}
        if("exposure_auto"==(*_i)->name){exposure_auto = boost::any_cast<std::string>(val);}
        if("exposure_auto_alg"==(*_i)->name){exposure_auto_alg = boost::any_cast<std::string>(val);}
        if("exposure_auto_tol"==(*_i)->name){exposure_auto_tol = boost::any_cast<int>(val);}
        if("exposure_auto_max"==(*_i)->name){exposure_auto_max = boost::any_cast<int>(val);}
        if("exposure_auto_min"==(*_i)->name){exposure_auto_min = boost::any_cast<int>(val);}
        if("exposure_auto_outliers"==(*_i)->name){exposure_auto_outliers = boost::any_cast<int>(val);}
        if("exposure_auto_rate"==(*_i)->name){exposure_auto_rate = boost::any_cast<int>(val);}
        if("exposure_auto_target"==(*_i)->name){exposure_auto_target = boost::any_cast<int>(val);}
        if("exposure_mode"==(*_i)->name){exposure_mode = boost::any_cast<std::string>(val);}
        if("exposure_time_PWL1"==(*_i)->name){exposure_time_PWL1 = boost::any_cast<double>(val);}
        if("exposure_time_PWL2"==(*_i)->name){exposure_time_PWL2 = boost::any_cast<double>(val);}
        if("exposure_threshold_PWL1"==(*_i)->name){exposure_threshold_PWL1 = boost::any_cast<int>(val);}
        if("exposure_threshold_PWL2"==(*_i)->name){exposure_threshold_PWL2 = boost::any_cast<int>(val);}
        if("gain"==(*_i)->name){gain = boost::any_cast<double>(val);}
        if("gain_auto"==(*_i)->name){gain_auto = boost::any_cast<std::string>(val);}
        if("gain_auto_adjust_tol"==(*_i)->name){gain_auto_adjust_tol = boost::any_cast<int>(val);}
        if("gain_auto_max"==(*_i)->name){gain_auto_max = boost::any_cast<double>(val);}
        if("gain_auto_min"==(*_i)->name){gain_auto_min = boost::any_cast<double>(val);}
        if("gain_auto_outliers"==(*_i)->name){gain_auto_outliers = boost::any_cast<int>(val);}
        if("gain_auto_rate"==(*_i)->name){gain_auto_rate = boost::any_cast<int>(val);}
        if("gain_auto_target"==(*_i)->name){gain_auto_target = boost::any_cast<int>(val);}
        if("balance_ratio_abs"==(*_i)->name){balance_ratio_abs = boost::any_cast<double>(val);}
        if("balance_ratio_selector"==(*_i)->name){balance_ratio_selector = boost::any_cast<std::string>(val);}
        if("whitebalance_auto"==(*_i)->name){whitebalance_auto = boost::any_cast<std::string>(val);}
        if("whitebalance_auto_tol"==(*_i)->name){whitebalance_auto_tol = boost::any_cast<int>(val);}
        if("whitebalance_auto_rate"==(*_i)->name){whitebalance_auto_rate = boost::any_cast<int>(val);}
        if("gamma"==(*_i)->name){gamma = boost::any_cast<double>(val);}
        if("subregion_bottom"==(*_i)->name){subregion_bottom = boost::any_cast<int>(val);}
        if("subregion_top"==(*_i)->name){subregion_top = boost::any_cast<int>(val);}
        if("subregion_right"==(*_i)->name){subregion_right = boost::any_cast<int>(val);}
        if("subregion_left"==(*_i)->name){subregion_left = boost::any_cast<int>(val);}
        if("binning_x"==(*_i)->name){binning_x = boost::any_cast<int>(val);}
        if("binning_y"==(*_i)->name){binning_y = boost::any_cast<int>(val);}
        if("decimation_x"==(*_i)->name){decimation_x = boost::any_cast<int>(val);}
        if("decimation_y"==(*_i)->name){decimation_y = boost::any_cast<int>(val);}
        if("reverse_x"==(*_i)->name){reverse_x = boost::any_cast<bool>(val);}
        if("reverse_y"==(*_i)->name){reverse_y = boost::any_cast<bool>(val);}
        if("width"==(*_i)->name){width = boost::any_cast<int>(val);}
        if("height"==(*_i)->name){height = boost::any_cast<int>(val);}
        if("offset_x"==(*_i)->name){offset_x = boost::any_cast<int>(val);}
        if("offset_y"==(*_i)->name){offset_y = boost::any_cast<int>(val);}
        if("pixel_format"==(*_i)->name){pixel_format = boost::any_cast<std::string>(val);}
        if("stream_bytes_per_second"==(*_i)->name){stream_bytes_per_second = boost::any_cast<int>(val);}
        if("ptp_mode"==(*_i)->name){ptp_mode = boost::any_cast<std::string>(val);}
        if("sync_in_selector"==(*_i)->name){sync_in_selector = boost::any_cast<std::string>(val);}
        if("sync_out_polarity"==(*_i)->name){sync_out_polarity = boost::any_cast<std::string>(val);}
        if("sync_out_selector"==(*_i)->name){sync_out_selector = boost::any_cast<std::string>(val);}
        if("sync_out_source"==(*_i)->name){sync_out_source = boost::any_cast<std::string>(val);}
        if("line_selector"==(*_i)->name){line_selector = boost::any_cast<std::string>(val);}
        if("line_mode"==(*_i)->name){line_mode = boost::any_cast<std::string>(val);}
        if("iris_auto_target"==(*_i)->name){iris_auto_target = boost::any_cast<int>(val);}
        if("iris_mode"==(*_i)->name){iris_mode = boost::any_cast<std::string>(val);}
        if("iris_video_level_min"==(*_i)->name){iris_video_level_min = boost::any_cast<int>(val);}
        if("iris_video_level_max"==(*_i)->name){iris_video_level_max = boost::any_cast<int>(val);}
      }
    }

    std::string acquisition_mode;
double acquisition_rate;
bool acquisition_rate_enable;
std::string trigger_source;
std::string trigger_mode;
std::string trigger_selector;
std::string trigger_activation;
double trigger_delay;
int action_device_key;
int action_group_key;
int action_group_mask;
double exposure;
std::string exposure_auto;
std::string exposure_auto_alg;
int exposure_auto_tol;
int exposure_auto_max;
int exposure_auto_min;
int exposure_auto_outliers;
int exposure_auto_rate;
int exposure_auto_target;
std::string exposure_mode;
double exposure_time_PWL1;
double exposure_time_PWL2;
int exposure_threshold_PWL1;
int exposure_threshold_PWL2;
double gain;
std::string gain_auto;
int gain_auto_adjust_tol;
double gain_auto_max;
double gain_auto_min;
int gain_auto_outliers;
int gain_auto_rate;
int gain_auto_target;
double balance_ratio_abs;
std::string balance_ratio_selector;
std::string whitebalance_auto;
int whitebalance_auto_tol;
int whitebalance_auto_rate;
double gamma;
int subregion_bottom;
int subregion_top;
int subregion_right;
int subregion_left;
int binning_x;
int binning_y;
int decimation_x;
int decimation_y;
bool reverse_x;
bool reverse_y;
int width;
int height;
int offset_x;
int offset_y;
std::string pixel_format;
int stream_bytes_per_second;
std::string ptp_mode;
std::string sync_in_selector;
std::string sync_out_polarity;
std::string sync_out_selector;
std::string sync_out_source;
std::string line_selector;
std::string line_mode;
int iris_auto_target;
std::string iris_mode;
int iris_video_level_min;
int iris_video_level_max;

    bool state;
    std::string name;

    
}groups;



//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string acquisition_mode;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double acquisition_rate;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool acquisition_rate_enable;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string trigger_source;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string trigger_mode;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string trigger_selector;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string trigger_activation;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double trigger_delay;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int action_device_key;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int action_group_key;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int action_group_mask;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double exposure;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string exposure_auto;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string exposure_auto_alg;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int exposure_auto_tol;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int exposure_auto_max;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int exposure_auto_min;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int exposure_auto_outliers;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int exposure_auto_rate;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int exposure_auto_target;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string exposure_mode;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double exposure_time_PWL1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double exposure_time_PWL2;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int exposure_threshold_PWL1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int exposure_threshold_PWL2;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double gain;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string gain_auto;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int gain_auto_adjust_tol;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double gain_auto_max;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double gain_auto_min;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int gain_auto_outliers;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int gain_auto_rate;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int gain_auto_target;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double balance_ratio_abs;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string balance_ratio_selector;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string whitebalance_auto;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int whitebalance_auto_tol;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int whitebalance_auto_rate;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double gamma;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int subregion_bottom;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int subregion_top;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int subregion_right;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int subregion_left;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int binning_x;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int binning_y;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int decimation_x;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int decimation_y;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool reverse_x;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool reverse_y;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int width;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int height;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int offset_x;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int offset_y;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string pixel_format;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int stream_bytes_per_second;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string ptp_mode;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string sync_in_selector;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string sync_out_polarity;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string sync_out_selector;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string sync_out_source;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string line_selector;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string line_mode;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int iris_auto_target;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string iris_mode;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int iris_video_level_min;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int iris_video_level_max;
//#line 231 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("AvtVimbaCameraConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const AvtVimbaCameraConfig &__max__ = __getMax__();
      const AvtVimbaCameraConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const AvtVimbaCameraConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const AvtVimbaCameraConfig &__getDefault__();
    static const AvtVimbaCameraConfig &__getMax__();
    static const AvtVimbaCameraConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const AvtVimbaCameraConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void AvtVimbaCameraConfig::ParamDescription<std::string>::clamp(AvtVimbaCameraConfig &config, const AvtVimbaCameraConfig &max, const AvtVimbaCameraConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class AvtVimbaCameraConfigStatics
  {
    friend class AvtVimbaCameraConfig;

    AvtVimbaCameraConfigStatics()
    {
AvtVimbaCameraConfig::GroupDescription<AvtVimbaCameraConfig::DEFAULT, AvtVimbaCameraConfig> Default("Default", "", 0, 0, true, &AvtVimbaCameraConfig::groups);
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.acquisition_mode = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.acquisition_mode = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.acquisition_mode = "Continuous";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("acquisition_mode", "str", 1, "Camera acquisition mode", "{'enum': [{'name': 'Continuous', 'type': 'str', 'value': 'Continuous', 'srcline': 46, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'After an acquisition start event, the camera will continuously receive frame trigger events.', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SingleFrame', 'type': 'str', 'value': 'SingleFrame', 'srcline': 47, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'The camera will only deliver a single frame trigger event', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'MultiFrame', 'type': 'str', 'value': 'MultiFrame', 'srcline': 48, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'The camera will acquire the number of images specified by `~AcquisitionFrameCount`. Further trigger events will be ignored', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Recorder', 'type': 'str', 'value': 'Recorder', 'srcline': 49, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'The camera will continuously record images into the camera on-board memory', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Trigger Mode'}", &AvtVimbaCameraConfig::acquisition_mode)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("acquisition_mode", "str", 1, "Camera acquisition mode", "{'enum': [{'name': 'Continuous', 'type': 'str', 'value': 'Continuous', 'srcline': 46, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'After an acquisition start event, the camera will continuously receive frame trigger events.', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SingleFrame', 'type': 'str', 'value': 'SingleFrame', 'srcline': 47, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'The camera will only deliver a single frame trigger event', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'MultiFrame', 'type': 'str', 'value': 'MultiFrame', 'srcline': 48, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'The camera will acquire the number of images specified by `~AcquisitionFrameCount`. Further trigger events will be ignored', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Recorder', 'type': 'str', 'value': 'Recorder', 'srcline': 49, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'The camera will continuously record images into the camera on-board memory', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Trigger Mode'}", &AvtVimbaCameraConfig::acquisition_mode)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.acquisition_rate = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.acquisition_rate = 35.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.acquisition_rate = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("acquisition_rate", "double", 0, "Sets the expected triggering rate in externally triggered mode.", "", &AvtVimbaCameraConfig::acquisition_rate)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("acquisition_rate", "double", 0, "Sets the expected triggering rate in externally triggered mode.", "", &AvtVimbaCameraConfig::acquisition_rate)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.acquisition_rate_enable = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.acquisition_rate_enable = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.acquisition_rate_enable = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<bool>("acquisition_rate_enable", "bool", 0, "Allows to fix acquisition rate, if available", "", &AvtVimbaCameraConfig::acquisition_rate_enable)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<bool>("acquisition_rate_enable", "bool", 0, "Allows to fix acquisition rate, if available", "", &AvtVimbaCameraConfig::acquisition_rate_enable)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.trigger_source = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.trigger_source = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.trigger_source = "FixedRate";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("trigger_source", "str", 1, "Camera trigger source", "{'enum': [{'name': 'Freerun', 'type': 'str', 'value': 'Freerun', 'srcline': 13, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'Run at maximum frame rate', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Line0', 'type': 'str', 'value': 'Line0', 'srcline': 14, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'External trigger on SyncIn0/Line0 line', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Line1', 'type': 'str', 'value': 'Line1', 'srcline': 15, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'External trigger on SyncIn1/Line1 line', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Line2', 'type': 'str', 'value': 'Line2', 'srcline': 16, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'External trigger on SyncIn2/Line2 line', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Line3', 'type': 'str', 'value': 'Line3', 'srcline': 17, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'External trigger on SyncIn3/Line3 line', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Line4', 'type': 'str', 'value': 'Line4', 'srcline': 18, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'External trigger on SyncIn4 line', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'FixedRate', 'type': 'str', 'value': 'FixedRate', 'srcline': 19, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'Camera self-triggers at a fixed frame rate defined by `~AcquisitionFrameRateAbs`', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Software', 'type': 'str', 'value': 'Software', 'srcline': 20, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'Software inititated image capture', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Action0', 'type': 'str', 'value': 'Action0', 'srcline': 21, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'Trigger over ethernet action0', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Action1', 'type': 'str', 'value': 'Action1', 'srcline': 22, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'Trigger over ethernet action1', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Trigger Mode'}", &AvtVimbaCameraConfig::trigger_source)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("trigger_source", "str", 1, "Camera trigger source", "{'enum': [{'name': 'Freerun', 'type': 'str', 'value': 'Freerun', 'srcline': 13, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'Run at maximum frame rate', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Line0', 'type': 'str', 'value': 'Line0', 'srcline': 14, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'External trigger on SyncIn0/Line0 line', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Line1', 'type': 'str', 'value': 'Line1', 'srcline': 15, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'External trigger on SyncIn1/Line1 line', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Line2', 'type': 'str', 'value': 'Line2', 'srcline': 16, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'External trigger on SyncIn2/Line2 line', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Line3', 'type': 'str', 'value': 'Line3', 'srcline': 17, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'External trigger on SyncIn3/Line3 line', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Line4', 'type': 'str', 'value': 'Line4', 'srcline': 18, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'External trigger on SyncIn4 line', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'FixedRate', 'type': 'str', 'value': 'FixedRate', 'srcline': 19, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'Camera self-triggers at a fixed frame rate defined by `~AcquisitionFrameRateAbs`', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Software', 'type': 'str', 'value': 'Software', 'srcline': 20, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'Software inititated image capture', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Action0', 'type': 'str', 'value': 'Action0', 'srcline': 21, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'Trigger over ethernet action0', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Action1', 'type': 'str', 'value': 'Action1', 'srcline': 22, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'Trigger over ethernet action1', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Trigger Mode'}", &AvtVimbaCameraConfig::trigger_source)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.trigger_mode = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.trigger_mode = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.trigger_mode = "On";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("trigger_mode", "str", 1, "Camera trigger mode", "{'enum': [{'name': 'ModeOn', 'type': 'str', 'value': 'On', 'srcline': 34, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'ModeOff', 'type': 'str', 'value': 'Off', 'srcline': 35, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Trigger mode'}", &AvtVimbaCameraConfig::trigger_mode)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("trigger_mode", "str", 1, "Camera trigger mode", "{'enum': [{'name': 'ModeOn', 'type': 'str', 'value': 'On', 'srcline': 34, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'ModeOff', 'type': 'str', 'value': 'Off', 'srcline': 35, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Trigger mode'}", &AvtVimbaCameraConfig::trigger_mode)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.trigger_selector = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.trigger_selector = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.trigger_selector = "FrameStart";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("trigger_selector", "str", 1, "Camera trigger selector", "{'enum': [{'name': 'FrameStart', 'type': 'str', 'value': 'FrameStart', 'srcline': 39, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'AcquisitionStart', 'type': 'str', 'value': 'AcquisitionStart', 'srcline': 40, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'AcquisitionEnd', 'type': 'str', 'value': 'AcquisitionEnd', 'srcline': 41, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'AcquisitionRecord', 'type': 'str', 'value': 'AcquisitionRecord', 'srcline': 42, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Trigger activation selector'}", &AvtVimbaCameraConfig::trigger_selector)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("trigger_selector", "str", 1, "Camera trigger selector", "{'enum': [{'name': 'FrameStart', 'type': 'str', 'value': 'FrameStart', 'srcline': 39, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'AcquisitionStart', 'type': 'str', 'value': 'AcquisitionStart', 'srcline': 40, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'AcquisitionEnd', 'type': 'str', 'value': 'AcquisitionEnd', 'srcline': 41, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'AcquisitionRecord', 'type': 'str', 'value': 'AcquisitionRecord', 'srcline': 42, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Trigger activation selector'}", &AvtVimbaCameraConfig::trigger_selector)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.trigger_activation = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.trigger_activation = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.trigger_activation = "RisingEdge";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("trigger_activation", "str", 1, "Camera trigger activation", "{'enum': [{'name': 'RisingEdge', 'type': 'str', 'value': 'RisingEdge', 'srcline': 26, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'FallingEdge', 'type': 'str', 'value': 'FallingEdge', 'srcline': 27, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'AnyEdge', 'type': 'str', 'value': 'AnyEdge', 'srcline': 28, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'LevelHigh', 'type': 'str', 'value': 'LevelHigh', 'srcline': 29, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'LevelLow', 'type': 'str', 'value': 'LevelLow', 'srcline': 30, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Automatic Control'}", &AvtVimbaCameraConfig::trigger_activation)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("trigger_activation", "str", 1, "Camera trigger activation", "{'enum': [{'name': 'RisingEdge', 'type': 'str', 'value': 'RisingEdge', 'srcline': 26, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'FallingEdge', 'type': 'str', 'value': 'FallingEdge', 'srcline': 27, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'AnyEdge', 'type': 'str', 'value': 'AnyEdge', 'srcline': 28, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'LevelHigh', 'type': 'str', 'value': 'LevelHigh', 'srcline': 29, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'LevelLow', 'type': 'str', 'value': 'LevelLow', 'srcline': 30, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Automatic Control'}", &AvtVimbaCameraConfig::trigger_activation)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.trigger_delay = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.trigger_delay = 60000000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.trigger_delay = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("trigger_delay", "double", 0, "Trigger delay in us (only valid when set to external trigger)", "", &AvtVimbaCameraConfig::trigger_delay)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("trigger_delay", "double", 0, "Trigger delay in us (only valid when set to external trigger)", "", &AvtVimbaCameraConfig::trigger_delay)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.action_device_key = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.action_device_key = 4294967295;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.action_device_key = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("action_device_key", "int", 1, "Camera action device key", "", &AvtVimbaCameraConfig::action_device_key)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("action_device_key", "int", 1, "Camera action device key", "", &AvtVimbaCameraConfig::action_device_key)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.action_group_key = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.action_group_key = 4294967295;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.action_group_key = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("action_group_key", "int", 1, "Camera action group key", "", &AvtVimbaCameraConfig::action_group_key)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("action_group_key", "int", 1, "Camera action group key", "", &AvtVimbaCameraConfig::action_group_key)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.action_group_mask = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.action_group_mask = 4294967295;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.action_group_mask = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("action_group_mask", "int", 1, "Camera action group mask", "", &AvtVimbaCameraConfig::action_group_mask)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("action_group_mask", "int", 1, "Camera action group mask", "", &AvtVimbaCameraConfig::action_group_mask)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure = 41.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure = 60000000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure = 50000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("exposure", "double", 0, "Camera exposure time in microseconds.", "", &AvtVimbaCameraConfig::exposure)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("exposure", "double", 0, "Camera exposure time in microseconds.", "", &AvtVimbaCameraConfig::exposure)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure_auto = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure_auto = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure_auto = "Continuous";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("exposure_auto", "str", 0, "Sets the camera exposure. If continously automatic, causes the `~exposure` setting to be ignored.", "{'enum': [{'name': 'Off', 'type': 'str', 'value': 'Off', 'srcline': 84, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Once', 'type': 'str', 'value': 'Once', 'srcline': 85, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Auto', 'type': 'str', 'value': 'Continuous', 'srcline': 86, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Automatic Control'}", &AvtVimbaCameraConfig::exposure_auto)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("exposure_auto", "str", 0, "Sets the camera exposure. If continously automatic, causes the `~exposure` setting to be ignored.", "{'enum': [{'name': 'Off', 'type': 'str', 'value': 'Off', 'srcline': 84, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Once', 'type': 'str', 'value': 'Once', 'srcline': 85, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Auto', 'type': 'str', 'value': 'Continuous', 'srcline': 86, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Automatic Control'}", &AvtVimbaCameraConfig::exposure_auto)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure_auto_alg = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure_auto_alg = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure_auto_alg = "FitRange";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("exposure_auto_alg", "str", 0, "The following algorithms can be used to calculate auto exposure", "{'enum': [{'name': 'Mean', 'type': 'str', 'value': 'Mean', 'srcline': 146, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '[Default] The arithmetic mean of the histogram of the current image is compared to ExposureAutoTarget, and the next image adjusted in exposure time to meet this target. Bright areas are allowed to saturate', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'FitRange', 'type': 'str', 'value': 'FitRange', 'srcline': 147, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'The histogram of the current image is measured, and the exposure time of the next image is adjusted so bright areas are not saturated', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'The following algorithms can be used to calculate auto exposure'}", &AvtVimbaCameraConfig::exposure_auto_alg)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("exposure_auto_alg", "str", 0, "The following algorithms can be used to calculate auto exposure", "{'enum': [{'name': 'Mean', 'type': 'str', 'value': 'Mean', 'srcline': 146, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '[Default] The arithmetic mean of the histogram of the current image is compared to ExposureAutoTarget, and the next image adjusted in exposure time to meet this target. Bright areas are allowed to saturate', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'FitRange', 'type': 'str', 'value': 'FitRange', 'srcline': 147, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'The histogram of the current image is measured, and the exposure time of the next image is adjusted so bright areas are not saturated', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'The following algorithms can be used to calculate auto exposure'}", &AvtVimbaCameraConfig::exposure_auto_alg)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure_auto_tol = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure_auto_tol = 50;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure_auto_tol = 5;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_auto_tol", "int", 0, "Tolerance in variation from ExposureAutoTarget in which the auto exposure algorithm will not respond.", "", &AvtVimbaCameraConfig::exposure_auto_tol)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_auto_tol", "int", 0, "Tolerance in variation from ExposureAutoTarget in which the auto exposure algorithm will not respond.", "", &AvtVimbaCameraConfig::exposure_auto_tol)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure_auto_max = 29;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure_auto_max = 85899341;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure_auto_max = 50000;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_auto_max", "int", 0, "The max exposure time in auto exposure mode, in microseconds.", "", &AvtVimbaCameraConfig::exposure_auto_max)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_auto_max", "int", 0, "The max exposure time in auto exposure mode, in microseconds.", "", &AvtVimbaCameraConfig::exposure_auto_max)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure_auto_min = 29;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure_auto_min = 85899341;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure_auto_min = 45;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_auto_min", "int", 0, "The min exposure time in auto exposure mode, in microseconds.", "", &AvtVimbaCameraConfig::exposure_auto_min)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_auto_min", "int", 0, "The min exposure time in auto exposure mode, in microseconds.", "", &AvtVimbaCameraConfig::exposure_auto_min)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure_auto_outliers = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure_auto_outliers = 10000;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure_auto_outliers = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_auto_outliers", "int", 0, "The total pixels from top of the distribution that are ignored by the auto exposure algorithm (0.01% increments)", "", &AvtVimbaCameraConfig::exposure_auto_outliers)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_auto_outliers", "int", 0, "The total pixels from top of the distribution that are ignored by the auto exposure algorithm (0.01% increments)", "", &AvtVimbaCameraConfig::exposure_auto_outliers)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure_auto_rate = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure_auto_rate = 100;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure_auto_rate = 100;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_auto_rate", "int", 0, "The rate at which the auto exposure function changes the exposure setting.100% is auto exposure adjustments running at full speed, and 50% is half speed.", "", &AvtVimbaCameraConfig::exposure_auto_rate)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_auto_rate", "int", 0, "The rate at which the auto exposure function changes the exposure setting.100% is auto exposure adjustments running at full speed, and 50% is half speed.", "", &AvtVimbaCameraConfig::exposure_auto_rate)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure_auto_target = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure_auto_target = 100;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure_auto_target = 50;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_auto_target", "int", 0, "The auto exposure target mean value as a percentage, from 0=black to 100=white.", "", &AvtVimbaCameraConfig::exposure_auto_target)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_auto_target", "int", 0, "The auto exposure target mean value as a percentage, from 0=black to 100=white.", "", &AvtVimbaCameraConfig::exposure_auto_target)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure_mode = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure_mode = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure_mode = "Timed";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("exposure_mode", "str", 0, "The control for exposure duration.", "{'enum': [{'name': 'Timed', 'type': 'str', 'value': 'Timed', 'srcline': 151, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '[Default] Camera exposure time is set by ExposureTimeAbs.', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'TriggerWidth', 'type': 'str', 'value': 'TriggerWidth', 'srcline': 152, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'Camera exposure time is controlled by external trigger pulse on Line1 or Line2. In order for this feature to work, TriggerSelector = FrameStart and TriggerSource must be set to Line1 or Line2.', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'PieceWiseLinearHDR', 'type': 'str', 'value': 'PieceWiseLinearHDR', 'srcline': 153, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'Image dynamic range is increased in difficult lighting situations by clamping down bright pixels with light levels beyond ThresholdPWL limits. Overall camera exposure time is set by ExposureTimeAbs. HDR sub-exposures are set using ExposureTimePWL1 and ExposureTimePWL2.', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'description'}", &AvtVimbaCameraConfig::exposure_mode)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("exposure_mode", "str", 0, "The control for exposure duration.", "{'enum': [{'name': 'Timed', 'type': 'str', 'value': 'Timed', 'srcline': 151, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '[Default] Camera exposure time is set by ExposureTimeAbs.', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'TriggerWidth', 'type': 'str', 'value': 'TriggerWidth', 'srcline': 152, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'Camera exposure time is controlled by external trigger pulse on Line1 or Line2. In order for this feature to work, TriggerSelector = FrameStart and TriggerSource must be set to Line1 or Line2.', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'PieceWiseLinearHDR', 'type': 'str', 'value': 'PieceWiseLinearHDR', 'srcline': 153, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': 'Image dynamic range is increased in difficult lighting situations by clamping down bright pixels with light levels beyond ThresholdPWL limits. Overall camera exposure time is set by ExposureTimeAbs. HDR sub-exposures are set using ExposureTimePWL1 and ExposureTimePWL2.', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'description'}", &AvtVimbaCameraConfig::exposure_mode)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure_time_PWL1 = 41.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure_time_PWL1 = 60000000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure_time_PWL1 = 50000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("exposure_time_PWL1", "double", 0, "Exposure time after ThresholdPWL1 is reached.", "", &AvtVimbaCameraConfig::exposure_time_PWL1)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("exposure_time_PWL1", "double", 0, "Exposure time after ThresholdPWL1 is reached.", "", &AvtVimbaCameraConfig::exposure_time_PWL1)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure_time_PWL2 = 41.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure_time_PWL2 = 60000000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure_time_PWL2 = 50000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("exposure_time_PWL2", "double", 0, "Exposure time after ThresholdPWL2 is reached.", "", &AvtVimbaCameraConfig::exposure_time_PWL2)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("exposure_time_PWL2", "double", 0, "Exposure time after ThresholdPWL2 is reached.", "", &AvtVimbaCameraConfig::exposure_time_PWL2)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure_threshold_PWL1 = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure_threshold_PWL1 = 63;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure_threshold_PWL1 = 63;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_threshold_PWL1", "int", 0, "The first and highest threshold level in PieceWiseLinearHDR. Leaving ThresholdPWL1 at 63 disables PieceWiseLinearHDR.", "", &AvtVimbaCameraConfig::exposure_threshold_PWL1)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_threshold_PWL1", "int", 0, "The first and highest threshold level in PieceWiseLinearHDR. Leaving ThresholdPWL1 at 63 disables PieceWiseLinearHDR.", "", &AvtVimbaCameraConfig::exposure_threshold_PWL1)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure_threshold_PWL2 = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure_threshold_PWL2 = 63;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure_threshold_PWL2 = 63;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_threshold_PWL2", "int", 0, "The second and lowest threshold level in PieceWiseLinearHDR. Leaving ThresholdPWL1 at 63 disables PieceWiseLinearHDR.", "", &AvtVimbaCameraConfig::exposure_threshold_PWL2)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("exposure_threshold_PWL2", "int", 0, "The second and lowest threshold level in PieceWiseLinearHDR. Leaving ThresholdPWL1 at 63 disables PieceWiseLinearHDR.", "", &AvtVimbaCameraConfig::exposure_threshold_PWL2)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.gain = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.gain = 40.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.gain = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("gain", "double", 0, "The gain level in dB.", "", &AvtVimbaCameraConfig::gain)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("gain", "double", 0, "The gain level in dB.", "", &AvtVimbaCameraConfig::gain)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.gain_auto = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.gain_auto = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.gain_auto = "Continuous";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("gain_auto", "str", 0, "Sets the analog gain. If continously automatic, causes the `~gain` setting to be ignored.", "{'enum': [{'name': 'Off', 'type': 'str', 'value': 'Off', 'srcline': 84, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Once', 'type': 'str', 'value': 'Once', 'srcline': 85, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Auto', 'type': 'str', 'value': 'Continuous', 'srcline': 86, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Automatic Control'}", &AvtVimbaCameraConfig::gain_auto)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("gain_auto", "str", 0, "Sets the analog gain. If continously automatic, causes the `~gain` setting to be ignored.", "{'enum': [{'name': 'Off', 'type': 'str', 'value': 'Off', 'srcline': 84, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Once', 'type': 'str', 'value': 'Once', 'srcline': 85, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Auto', 'type': 'str', 'value': 'Continuous', 'srcline': 86, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Automatic Control'}", &AvtVimbaCameraConfig::gain_auto)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.gain_auto_adjust_tol = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.gain_auto_adjust_tol = 50;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.gain_auto_adjust_tol = 5;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("gain_auto_adjust_tol", "int", 0, "Tolerance in variation from GainAutoTarget in which the auto exposure algorithm will not respond.", "", &AvtVimbaCameraConfig::gain_auto_adjust_tol)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("gain_auto_adjust_tol", "int", 0, "Tolerance in variation from GainAutoTarget in which the auto exposure algorithm will not respond.", "", &AvtVimbaCameraConfig::gain_auto_adjust_tol)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.gain_auto_max = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.gain_auto_max = 40.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.gain_auto_max = 32.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("gain_auto_max", "double", 0, "The max gain level in auto gain mode, in dB.", "", &AvtVimbaCameraConfig::gain_auto_max)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("gain_auto_max", "double", 0, "The max gain level in auto gain mode, in dB.", "", &AvtVimbaCameraConfig::gain_auto_max)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.gain_auto_min = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.gain_auto_min = 40.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.gain_auto_min = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("gain_auto_min", "double", 0, "The min gain level in auto gain mode, in dB.", "", &AvtVimbaCameraConfig::gain_auto_min)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("gain_auto_min", "double", 0, "The min gain level in auto gain mode, in dB.", "", &AvtVimbaCameraConfig::gain_auto_min)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.gain_auto_outliers = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.gain_auto_outliers = 10000;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.gain_auto_outliers = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("gain_auto_outliers", "int", 0, "The total pixels from top of the distribution that are ignored by the auto gain algorithm (0.01% increments).", "", &AvtVimbaCameraConfig::gain_auto_outliers)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("gain_auto_outliers", "int", 0, "The total pixels from top of the distribution that are ignored by the auto gain algorithm (0.01% increments).", "", &AvtVimbaCameraConfig::gain_auto_outliers)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.gain_auto_rate = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.gain_auto_rate = 100;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.gain_auto_rate = 50;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("gain_auto_rate", "int", 0, "The rate percentage at which the auto gain function changes.", "", &AvtVimbaCameraConfig::gain_auto_rate)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("gain_auto_rate", "int", 0, "The rate percentage at which the auto gain function changes.", "", &AvtVimbaCameraConfig::gain_auto_rate)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.gain_auto_target = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.gain_auto_target = 100;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.gain_auto_target = 50;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("gain_auto_target", "int", 0, "The general lightness or darkness of the auto gain feature. A percentage of maximum brightness.", "", &AvtVimbaCameraConfig::gain_auto_target)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("gain_auto_target", "int", 0, "The general lightness or darkness of the auto gain feature. A percentage of maximum brightness.", "", &AvtVimbaCameraConfig::gain_auto_target)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.balance_ratio_abs = 0.25;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.balance_ratio_abs = 4.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.balance_ratio_abs = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("balance_ratio_abs", "double", 0, "Adjusts the gain of the channel selected in the `~BalanceRatioSelector`", "", &AvtVimbaCameraConfig::balance_ratio_abs)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("balance_ratio_abs", "double", 0, "Adjusts the gain of the channel selected in the `~BalanceRatioSelector`", "", &AvtVimbaCameraConfig::balance_ratio_abs)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.balance_ratio_selector = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.balance_ratio_selector = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.balance_ratio_selector = "Red";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("balance_ratio_selector", "str", 0, "Select the Red or Blue channel to adjust with `~BalanceRatioAbs`", "{'enum': [{'name': 'Red', 'type': 'str', 'value': 'Red', 'srcline': 90, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Blue', 'type': 'str', 'value': 'Blue', 'srcline': 91, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Select the Red or Blue channel to adjust with `~BalanceRatioAbs`'}", &AvtVimbaCameraConfig::balance_ratio_selector)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("balance_ratio_selector", "str", 0, "Select the Red or Blue channel to adjust with `~BalanceRatioAbs`", "{'enum': [{'name': 'Red', 'type': 'str', 'value': 'Red', 'srcline': 90, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Blue', 'type': 'str', 'value': 'Blue', 'srcline': 91, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Select the Red or Blue channel to adjust with `~BalanceRatioAbs`'}", &AvtVimbaCameraConfig::balance_ratio_selector)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.whitebalance_auto = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.whitebalance_auto = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.whitebalance_auto = "Continuous";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("whitebalance_auto", "str", 0, "Whether whitebalance will continuously adjust to the current scene. Causes the `~whitebalance_red` and `~whitebalance_blue` settings to be ignored.", "{'enum': [{'name': 'Off', 'type': 'str', 'value': 'Off', 'srcline': 84, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Once', 'type': 'str', 'value': 'Once', 'srcline': 85, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Auto', 'type': 'str', 'value': 'Continuous', 'srcline': 86, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Automatic Control'}", &AvtVimbaCameraConfig::whitebalance_auto)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("whitebalance_auto", "str", 0, "Whether whitebalance will continuously adjust to the current scene. Causes the `~whitebalance_red` and `~whitebalance_blue` settings to be ignored.", "{'enum': [{'name': 'Off', 'type': 'str', 'value': 'Off', 'srcline': 84, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Once', 'type': 'str', 'value': 'Once', 'srcline': 85, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Auto', 'type': 'str', 'value': 'Continuous', 'srcline': 86, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Automatic Control'}", &AvtVimbaCameraConfig::whitebalance_auto)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.whitebalance_auto_tol = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.whitebalance_auto_tol = 50;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.whitebalance_auto_tol = 5;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("whitebalance_auto_tol", "int", 0, "Tolerance allowed from the ideal white balance values", "", &AvtVimbaCameraConfig::whitebalance_auto_tol)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("whitebalance_auto_tol", "int", 0, "Tolerance allowed from the ideal white balance values", "", &AvtVimbaCameraConfig::whitebalance_auto_tol)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.whitebalance_auto_rate = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.whitebalance_auto_rate = 100;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.whitebalance_auto_rate = 100;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("whitebalance_auto_rate", "int", 0, "Rate of white balance adjustments, from 1 (slowest) to 100 (fastest).", "", &AvtVimbaCameraConfig::whitebalance_auto_rate)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("whitebalance_auto_rate", "int", 0, "Rate of white balance adjustments, from 1 (slowest) to 100 (fastest).", "", &AvtVimbaCameraConfig::whitebalance_auto_rate)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.gamma = 0.25;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.gamma = 4.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.gamma = 0.45;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("gamma", "double", 0, "Controls the gamma correction of pixel intensity.", "", &AvtVimbaCameraConfig::gamma)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<double>("gamma", "double", 0, "Controls the gamma correction of pixel intensity.", "", &AvtVimbaCameraConfig::gamma)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.subregion_bottom = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.subregion_bottom = 1088;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.subregion_bottom = 1088;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("subregion_bottom", "int", 0, "Area which is used for measurements in AUTO functions e.g. auto_exposure. Defines the bottom edge of the subregion.", "", &AvtVimbaCameraConfig::subregion_bottom)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("subregion_bottom", "int", 0, "Area which is used for measurements in AUTO functions e.g. auto_exposure. Defines the bottom edge of the subregion.", "", &AvtVimbaCameraConfig::subregion_bottom)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.subregion_top = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.subregion_top = 1088;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.subregion_top = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("subregion_top", "int", 0, "Area which is used for measurements in AUTO functions e.g. auto_exposure. Defines the top edge of the subregion.", "", &AvtVimbaCameraConfig::subregion_top)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("subregion_top", "int", 0, "Area which is used for measurements in AUTO functions e.g. auto_exposure. Defines the top edge of the subregion.", "", &AvtVimbaCameraConfig::subregion_top)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.subregion_right = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.subregion_right = 2048;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.subregion_right = 2048;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("subregion_right", "int", 0, "Area which is used for measurements in AUTO functions e.g. auto_exposure. Defines the right edge of the subregion.", "", &AvtVimbaCameraConfig::subregion_right)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("subregion_right", "int", 0, "Area which is used for measurements in AUTO functions e.g. auto_exposure. Defines the right edge of the subregion.", "", &AvtVimbaCameraConfig::subregion_right)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.subregion_left = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.subregion_left = 2048;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.subregion_left = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("subregion_left", "int", 0, "Area which is used for measurements in AUTO functions e.g. auto_exposure. Defines the left edge of the subregion.", "", &AvtVimbaCameraConfig::subregion_left)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("subregion_left", "int", 0, "Area which is used for measurements in AUTO functions e.g. auto_exposure. Defines the left edge of the subregion.", "", &AvtVimbaCameraConfig::subregion_left)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.binning_x = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.binning_x = 8;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.binning_x = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("binning_x", "int", 0, "Number of pixels to bin together horizontally.", "", &AvtVimbaCameraConfig::binning_x)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("binning_x", "int", 0, "Number of pixels to bin together horizontally.", "", &AvtVimbaCameraConfig::binning_x)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.binning_y = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.binning_y = 14;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.binning_y = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("binning_y", "int", 0, "Number of pixels to bin together vertically.", "", &AvtVimbaCameraConfig::binning_y)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("binning_y", "int", 0, "Number of pixels to bin together vertically.", "", &AvtVimbaCameraConfig::binning_y)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.decimation_x = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.decimation_x = 8;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.decimation_x = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("decimation_x", "int", 0, "Number of decimation operations in x.", "", &AvtVimbaCameraConfig::decimation_x)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("decimation_x", "int", 0, "Number of decimation operations in x.", "", &AvtVimbaCameraConfig::decimation_x)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.decimation_y = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.decimation_y = 8;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.decimation_y = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("decimation_y", "int", 0, "Number of decimation operations in y.", "", &AvtVimbaCameraConfig::decimation_y)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("decimation_y", "int", 0, "Number of decimation operations in y.", "", &AvtVimbaCameraConfig::decimation_y)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.reverse_x = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.reverse_x = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.reverse_x = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<bool>("reverse_x", "bool", 0, "If True, it will flip the image along X-Axis Horizontally", "", &AvtVimbaCameraConfig::reverse_x)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<bool>("reverse_x", "bool", 0, "If True, it will flip the image along X-Axis Horizontally", "", &AvtVimbaCameraConfig::reverse_x)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.reverse_y = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.reverse_y = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.reverse_y = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<bool>("reverse_y", "bool", 0, "If True, it will flip the image along Y-Axis Vertically", "", &AvtVimbaCameraConfig::reverse_y)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<bool>("reverse_y", "bool", 0, "If True, it will flip the image along Y-Axis Vertically", "", &AvtVimbaCameraConfig::reverse_y)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.width = 4;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.width = 4096;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.width = 4096;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("width", "int", 0, "Width of the region of interest (0 for automatic).", "", &AvtVimbaCameraConfig::width)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("width", "int", 0, "Width of the region of interest (0 for automatic).", "", &AvtVimbaCameraConfig::width)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.height = 4;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.height = 4096;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.height = 4096;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("height", "int", 0, "Height of the region of interest (0 for automatic).", "", &AvtVimbaCameraConfig::height)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("height", "int", 0, "Height of the region of interest (0 for automatic).", "", &AvtVimbaCameraConfig::height)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.offset_x = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.offset_x = 4095;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.offset_x = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("offset_x", "int", 0, "X offset of the region of interest.", "", &AvtVimbaCameraConfig::offset_x)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("offset_x", "int", 0, "X offset of the region of interest.", "", &AvtVimbaCameraConfig::offset_x)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.offset_y = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.offset_y = 4095;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.offset_y = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("offset_y", "int", 0, "Y offset of the region of interest.", "", &AvtVimbaCameraConfig::offset_y)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("offset_y", "int", 0, "Y offset of the region of interest.", "", &AvtVimbaCameraConfig::offset_y)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.pixel_format = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.pixel_format = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.pixel_format = "Mono8";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("pixel_format", "str", 3, "Format of the image data.", "{'enum': [{'name': 'Mono8', 'type': 'str', 'value': 'Mono8', 'srcline': 54, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Mono10', 'type': 'str', 'value': 'Mono10', 'srcline': 55, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Mono10Packed', 'type': 'str', 'value': 'Mono10Packed', 'srcline': 56, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Mono12', 'type': 'str', 'value': 'Mono12', 'srcline': 57, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Mono12Packed', 'type': 'str', 'value': 'Mono12Packed', 'srcline': 58, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGR8', 'type': 'str', 'value': 'BayerGR8', 'srcline': 59, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerRG8', 'type': 'str', 'value': 'BayerRG8', 'srcline': 60, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGB8', 'type': 'str', 'value': 'BayerGB8', 'srcline': 61, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerBG8', 'type': 'str', 'value': 'BayerBG8', 'srcline': 62, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGR10', 'type': 'str', 'value': 'BayerGR10', 'srcline': 63, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerRG10', 'type': 'str', 'value': 'BayerRG10', 'srcline': 64, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGB10', 'type': 'str', 'value': 'BayerGB10', 'srcline': 65, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerBG10', 'type': 'str', 'value': 'BayerBG10', 'srcline': 66, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGR12', 'type': 'str', 'value': 'BayerGR12', 'srcline': 67, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerRG12', 'type': 'str', 'value': 'BayerRG12', 'srcline': 68, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGB12', 'type': 'str', 'value': 'BayerGB12', 'srcline': 69, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerBG12', 'type': 'str', 'value': 'BayerBG12', 'srcline': 70, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGR10Packed', 'type': 'str', 'value': 'BayerGR10Packed', 'srcline': 71, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerRG10Packed', 'type': 'str', 'value': 'BayerRG10Packed', 'srcline': 72, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGB10Packed', 'type': 'str', 'value': 'BayerGB10Packed', 'srcline': 73, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerBG10Packed', 'type': 'str', 'value': 'BayerBG10Packed', 'srcline': 74, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGR12Packed', 'type': 'str', 'value': 'BayerGR12Packed', 'srcline': 75, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerRG12Packed', 'type': 'str', 'value': 'BayerRG12Packed', 'srcline': 76, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGB12Packed', 'type': 'str', 'value': 'BayerGB12Packed', 'srcline': 77, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerBG12Packed', 'type': 'str', 'value': 'BayerBG12Packed', 'srcline': 78, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'RGB8Packed', 'type': 'str', 'value': 'RGB8Packed', 'srcline': 79, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BGR8Packed', 'type': 'str', 'value': 'BGR8Packed', 'srcline': 80, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Pixel Format'}", &AvtVimbaCameraConfig::pixel_format)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("pixel_format", "str", 3, "Format of the image data.", "{'enum': [{'name': 'Mono8', 'type': 'str', 'value': 'Mono8', 'srcline': 54, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Mono10', 'type': 'str', 'value': 'Mono10', 'srcline': 55, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Mono10Packed', 'type': 'str', 'value': 'Mono10Packed', 'srcline': 56, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Mono12', 'type': 'str', 'value': 'Mono12', 'srcline': 57, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Mono12Packed', 'type': 'str', 'value': 'Mono12Packed', 'srcline': 58, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGR8', 'type': 'str', 'value': 'BayerGR8', 'srcline': 59, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerRG8', 'type': 'str', 'value': 'BayerRG8', 'srcline': 60, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGB8', 'type': 'str', 'value': 'BayerGB8', 'srcline': 61, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerBG8', 'type': 'str', 'value': 'BayerBG8', 'srcline': 62, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGR10', 'type': 'str', 'value': 'BayerGR10', 'srcline': 63, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerRG10', 'type': 'str', 'value': 'BayerRG10', 'srcline': 64, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGB10', 'type': 'str', 'value': 'BayerGB10', 'srcline': 65, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerBG10', 'type': 'str', 'value': 'BayerBG10', 'srcline': 66, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGR12', 'type': 'str', 'value': 'BayerGR12', 'srcline': 67, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerRG12', 'type': 'str', 'value': 'BayerRG12', 'srcline': 68, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGB12', 'type': 'str', 'value': 'BayerGB12', 'srcline': 69, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerBG12', 'type': 'str', 'value': 'BayerBG12', 'srcline': 70, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGR10Packed', 'type': 'str', 'value': 'BayerGR10Packed', 'srcline': 71, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerRG10Packed', 'type': 'str', 'value': 'BayerRG10Packed', 'srcline': 72, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGB10Packed', 'type': 'str', 'value': 'BayerGB10Packed', 'srcline': 73, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerBG10Packed', 'type': 'str', 'value': 'BayerBG10Packed', 'srcline': 74, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGR12Packed', 'type': 'str', 'value': 'BayerGR12Packed', 'srcline': 75, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerRG12Packed', 'type': 'str', 'value': 'BayerRG12Packed', 'srcline': 76, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerGB12Packed', 'type': 'str', 'value': 'BayerGB12Packed', 'srcline': 77, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BayerBG12Packed', 'type': 'str', 'value': 'BayerBG12Packed', 'srcline': 78, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'RGB8Packed', 'type': 'str', 'value': 'RGB8Packed', 'srcline': 79, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'BGR8Packed', 'type': 'str', 'value': 'BGR8Packed', 'srcline': 80, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Pixel Format'}", &AvtVimbaCameraConfig::pixel_format)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.stream_bytes_per_second = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.stream_bytes_per_second = 125000000;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.stream_bytes_per_second = 124000000;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("stream_bytes_per_second", "int", 0, "Limits the data rate of the camera.", "", &AvtVimbaCameraConfig::stream_bytes_per_second)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("stream_bytes_per_second", "int", 0, "Limits the data rate of the camera.", "", &AvtVimbaCameraConfig::stream_bytes_per_second)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ptp_mode = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ptp_mode = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ptp_mode = "Off";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("ptp_mode", "str", 0, "Controls the PTP behavior of the clock port.", "{'enum': [{'name': 'PtpOff', 'type': 'str', 'value': 'Off', 'srcline': 100, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'PtpSlave', 'type': 'str', 'value': 'Slave', 'srcline': 101, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'PtpMaster', 'type': 'str', 'value': 'Master', 'srcline': 102, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'PtpAuto', 'type': 'str', 'value': 'Auto', 'srcline': 103, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Select PrecissionTimeProtocol Mode'}", &AvtVimbaCameraConfig::ptp_mode)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("ptp_mode", "str", 0, "Controls the PTP behavior of the clock port.", "{'enum': [{'name': 'PtpOff', 'type': 'str', 'value': 'Off', 'srcline': 100, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'PtpSlave', 'type': 'str', 'value': 'Slave', 'srcline': 101, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'PtpMaster', 'type': 'str', 'value': 'Master', 'srcline': 102, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'PtpAuto', 'type': 'str', 'value': 'Auto', 'srcline': 103, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Select PrecissionTimeProtocol Mode'}", &AvtVimbaCameraConfig::ptp_mode)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sync_in_selector = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sync_in_selector = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sync_in_selector = "SyncIn1";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("sync_in_selector", "str", 1, "Selects the sync-out line to control", "{'enum': [{'name': 'SyncIn1', 'type': 'str', 'value': 'SyncIn1', 'srcline': 107, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncIn2', 'type': 'str', 'value': 'SyncIn2', 'srcline': 108, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncIn3', 'type': 'str', 'value': 'SyncIn3', 'srcline': 109, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncIn4', 'type': 'str', 'value': 'SyncIn4', 'srcline': 110, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Sync-in selector'}", &AvtVimbaCameraConfig::sync_in_selector)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("sync_in_selector", "str", 1, "Selects the sync-out line to control", "{'enum': [{'name': 'SyncIn1', 'type': 'str', 'value': 'SyncIn1', 'srcline': 107, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncIn2', 'type': 'str', 'value': 'SyncIn2', 'srcline': 108, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncIn3', 'type': 'str', 'value': 'SyncIn3', 'srcline': 109, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncIn4', 'type': 'str', 'value': 'SyncIn4', 'srcline': 110, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Sync-in selector'}", &AvtVimbaCameraConfig::sync_in_selector)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sync_out_polarity = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sync_out_polarity = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sync_out_polarity = "Normal";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("sync_out_polarity", "str", 1, "Polarity applied to the sync-out line specified by `sync_out_selector`", "{'enum': [{'name': 'Normal', 'type': 'str', 'value': 'Normal', 'srcline': 95, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Invert', 'type': 'str', 'value': 'Invert', 'srcline': 96, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Polarity'}", &AvtVimbaCameraConfig::sync_out_polarity)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("sync_out_polarity", "str", 1, "Polarity applied to the sync-out line specified by `sync_out_selector`", "{'enum': [{'name': 'Normal', 'type': 'str', 'value': 'Normal', 'srcline': 95, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Invert', 'type': 'str', 'value': 'Invert', 'srcline': 96, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Polarity'}", &AvtVimbaCameraConfig::sync_out_polarity)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sync_out_selector = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sync_out_selector = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sync_out_selector = "SyncOut1";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("sync_out_selector", "str", 1, "Selects the sync-out line to control", "{'enum': [{'name': 'SyncOut1', 'type': 'str', 'value': 'SyncOut1', 'srcline': 114, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncOut2', 'type': 'str', 'value': 'SyncOut2', 'srcline': 115, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncOut3', 'type': 'str', 'value': 'SyncOut3', 'srcline': 116, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncOut4', 'type': 'str', 'value': 'SyncOut4', 'srcline': 117, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Sync-out selector'}", &AvtVimbaCameraConfig::sync_out_selector)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("sync_out_selector", "str", 1, "Selects the sync-out line to control", "{'enum': [{'name': 'SyncOut1', 'type': 'str', 'value': 'SyncOut1', 'srcline': 114, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncOut2', 'type': 'str', 'value': 'SyncOut2', 'srcline': 115, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncOut3', 'type': 'str', 'value': 'SyncOut3', 'srcline': 116, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'SyncOut4', 'type': 'str', 'value': 'SyncOut4', 'srcline': 117, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Sync-out selector'}", &AvtVimbaCameraConfig::sync_out_selector)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sync_out_source = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sync_out_source = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sync_out_source = "GPO";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("sync_out_source", "str", 1, "Signal source of the sync-out line specified by `sync_out_selector`", "{'enum': [{'name': 'GPO', 'type': 'str', 'value': 'GPO', 'srcline': 121, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'AcquisitionTriggerReady', 'type': 'str', 'value': 'AcquisitionTriggerReady', 'srcline': 122, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'FrameTriggerReady', 'type': 'str', 'value': 'FrameTriggerReady', 'srcline': 123, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'FrameTrigger', 'type': 'str', 'value': 'FrameTrigger', 'srcline': 124, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Exposing', 'type': 'str', 'value': 'Exposing', 'srcline': 125, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'FrameReadout', 'type': 'str', 'value': 'FrameReadout', 'srcline': 126, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Imaging', 'type': 'str', 'value': 'Imaging', 'srcline': 127, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Acquiring', 'type': 'str', 'value': 'Acquiring', 'srcline': 128, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'LineIn1', 'type': 'str', 'value': 'LineIn1', 'srcline': 129, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'LineIn2', 'type': 'str', 'value': 'LineIn2', 'srcline': 130, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Sync-out signal'}", &AvtVimbaCameraConfig::sync_out_source)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("sync_out_source", "str", 1, "Signal source of the sync-out line specified by `sync_out_selector`", "{'enum': [{'name': 'GPO', 'type': 'str', 'value': 'GPO', 'srcline': 121, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'AcquisitionTriggerReady', 'type': 'str', 'value': 'AcquisitionTriggerReady', 'srcline': 122, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'FrameTriggerReady', 'type': 'str', 'value': 'FrameTriggerReady', 'srcline': 123, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'FrameTrigger', 'type': 'str', 'value': 'FrameTrigger', 'srcline': 124, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Exposing', 'type': 'str', 'value': 'Exposing', 'srcline': 125, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'FrameReadout', 'type': 'str', 'value': 'FrameReadout', 'srcline': 126, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Imaging', 'type': 'str', 'value': 'Imaging', 'srcline': 127, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Acquiring', 'type': 'str', 'value': 'Acquiring', 'srcline': 128, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'LineIn1', 'type': 'str', 'value': 'LineIn1', 'srcline': 129, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'LineIn2', 'type': 'str', 'value': 'LineIn2', 'srcline': 130, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Sync-out signal'}", &AvtVimbaCameraConfig::sync_out_source)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.line_selector = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.line_selector = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.line_selector = "Line0";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("line_selector", "str", 1, "Selects the line to control", "{'enum': [{'name': 'USBLine0', 'type': 'str', 'value': 'Line0', 'srcline': 134, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'USBLine1', 'type': 'str', 'value': 'Line1', 'srcline': 135, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'USBLine2', 'type': 'str', 'value': 'Line2', 'srcline': 136, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'USBLine3', 'type': 'str', 'value': 'Line3', 'srcline': 137, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Line selector'}", &AvtVimbaCameraConfig::line_selector)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("line_selector", "str", 1, "Selects the line to control", "{'enum': [{'name': 'USBLine0', 'type': 'str', 'value': 'Line0', 'srcline': 134, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'USBLine1', 'type': 'str', 'value': 'Line1', 'srcline': 135, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'USBLine2', 'type': 'str', 'value': 'Line2', 'srcline': 136, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'USBLine3', 'type': 'str', 'value': 'Line3', 'srcline': 137, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Line selector'}", &AvtVimbaCameraConfig::line_selector)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.line_mode = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.line_mode = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.line_mode = "Input";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("line_mode", "str", 1, "Controls the mode of the line specified by `line_selector`", "{'enum': [{'name': 'Output', 'type': 'str', 'value': 'Output', 'srcline': 141, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Input', 'type': 'str', 'value': 'Input', 'srcline': 142, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Line mode'}", &AvtVimbaCameraConfig::line_mode)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("line_mode", "str", 1, "Controls the mode of the line specified by `line_selector`", "{'enum': [{'name': 'Output', 'type': 'str', 'value': 'Output', 'srcline': 141, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Input', 'type': 'str', 'value': 'Input', 'srcline': 142, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Line mode'}", &AvtVimbaCameraConfig::line_mode)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.iris_auto_target = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.iris_auto_target = 100;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.iris_auto_target = 50;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("iris_auto_target", "int", 0, "This is the target image mean value, in percent.", "", &AvtVimbaCameraConfig::iris_auto_target)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("iris_auto_target", "int", 0, "This is the target image mean value, in percent.", "", &AvtVimbaCameraConfig::iris_auto_target)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.iris_mode = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.iris_mode = "";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.iris_mode = "Continuous";
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("iris_mode", "str", 0, "Set the iris mode. Disabled: no iris control. Video: enable video iris. VideoOpen: fully open a video iris. VideoClose: fully close a video iris.", "{'enum': [{'name': 'Off', 'type': 'str', 'value': 'Off', 'srcline': 84, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Once', 'type': 'str', 'value': 'Once', 'srcline': 85, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Auto', 'type': 'str', 'value': 'Continuous', 'srcline': 86, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Automatic Control'}", &AvtVimbaCameraConfig::iris_mode)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<std::string>("iris_mode", "str", 0, "Set the iris mode. Disabled: no iris control. Video: enable video iris. VideoOpen: fully open a video iris. VideoClose: fully close a video iris.", "{'enum': [{'name': 'Off', 'type': 'str', 'value': 'Off', 'srcline': 84, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Once', 'type': 'str', 'value': 'Once', 'srcline': 85, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}, {'name': 'Auto', 'type': 'str', 'value': 'Continuous', 'srcline': 86, 'srcfile': '/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg', 'description': '', 'ctype': 'std::string', 'cconsttype': 'const char * const'}], 'enum_description': 'Set Automatic Control'}", &AvtVimbaCameraConfig::iris_mode)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.iris_video_level_min = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.iris_video_level_min = 150;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.iris_video_level_min = 110;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("iris_video_level_min", "int", 0, "Minimum video iris level output by the camera, in approximately mV pp. A higher minimum value slows the adjustment time but prevents excessive overshoot.", "", &AvtVimbaCameraConfig::iris_video_level_min)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("iris_video_level_min", "int", 0, "Minimum video iris level output by the camera, in approximately mV pp. A higher minimum value slows the adjustment time but prevents excessive overshoot.", "", &AvtVimbaCameraConfig::iris_video_level_min)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.iris_video_level_max = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.iris_video_level_max = 150;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.iris_video_level_max = 110;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("iris_video_level_max", "int", 0, "Maximum video iris level output by the camera, in approximately mV pp. A lower minimum value slows the adjustment time but prevents excessive overshoot.", "", &AvtVimbaCameraConfig::iris_video_level_max)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr(new AvtVimbaCameraConfig::ParamDescription<int>("iris_video_level_max", "int", 0, "Maximum video iris level output by the camera, in approximately mV pp. A lower minimum value slows the adjustment time but prevents excessive overshoot.", "", &AvtVimbaCameraConfig::iris_video_level_max)));
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(AvtVimbaCameraConfig::AbstractGroupDescriptionConstPtr(new AvtVimbaCameraConfig::GroupDescription<AvtVimbaCameraConfig::DEFAULT, AvtVimbaCameraConfig>(Default)));
//#line 369 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<AvtVimbaCameraConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<AvtVimbaCameraConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    AvtVimbaCameraConfig __max__;
    AvtVimbaCameraConfig __min__;
    AvtVimbaCameraConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const AvtVimbaCameraConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static AvtVimbaCameraConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &AvtVimbaCameraConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const AvtVimbaCameraConfig &AvtVimbaCameraConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const AvtVimbaCameraConfig &AvtVimbaCameraConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const AvtVimbaCameraConfig &AvtVimbaCameraConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<AvtVimbaCameraConfig::AbstractParamDescriptionConstPtr> &AvtVimbaCameraConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<AvtVimbaCameraConfig::AbstractGroupDescriptionConstPtr> &AvtVimbaCameraConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const AvtVimbaCameraConfigStatics *AvtVimbaCameraConfig::__get_statics__()
  {
    const static AvtVimbaCameraConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = AvtVimbaCameraConfigStatics::get_instance();

    return statics;
  }

//#line 13 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Freerun = "Freerun";
//#line 14 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Line0 = "Line0";
//#line 15 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Line1 = "Line1";
//#line 16 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Line2 = "Line2";
//#line 17 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Line3 = "Line3";
//#line 18 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Line4 = "Line4";
//#line 19 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_FixedRate = "FixedRate";
//#line 20 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Software = "Software";
//#line 21 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Action0 = "Action0";
//#line 22 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Action1 = "Action1";
//#line 26 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_RisingEdge = "RisingEdge";
//#line 27 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_FallingEdge = "FallingEdge";
//#line 28 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_AnyEdge = "AnyEdge";
//#line 29 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_LevelHigh = "LevelHigh";
//#line 30 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_LevelLow = "LevelLow";
//#line 34 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_ModeOn = "On";
//#line 35 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_ModeOff = "Off";
//#line 39 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_FrameStart = "FrameStart";
//#line 40 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_AcquisitionStart = "AcquisitionStart";
//#line 41 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_AcquisitionEnd = "AcquisitionEnd";
//#line 42 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_AcquisitionRecord = "AcquisitionRecord";
//#line 46 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Continuous = "Continuous";
//#line 47 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_SingleFrame = "SingleFrame";
//#line 48 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_MultiFrame = "MultiFrame";
//#line 49 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Recorder = "Recorder";
//#line 54 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Mono8 = "Mono8";
//#line 55 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Mono10 = "Mono10";
//#line 56 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Mono10Packed = "Mono10Packed";
//#line 57 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Mono12 = "Mono12";
//#line 58 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Mono12Packed = "Mono12Packed";
//#line 59 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_BayerGR8 = "BayerGR8";
//#line 60 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_BayerRG8 = "BayerRG8";
//#line 61 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_BayerGB8 = "BayerGB8";
//#line 62 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_BayerBG8 = "BayerBG8";
//#line 63 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_BayerGR10 = "BayerGR10";
//#line 64 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_BayerRG10 = "BayerRG10";
//#line 65 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_BayerGB10 = "BayerGB10";
//#line 66 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_BayerBG10 = "BayerBG10";
//#line 67 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_BayerGR12 = "BayerGR12";
//#line 68 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_BayerRG12 = "BayerRG12";
//#line 69 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_BayerGB12 = "BayerGB12";
//#line 70 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_BayerBG12 = "BayerBG12";
//#line 71 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_BayerGR10Packed = "BayerGR10Packed";
//#line 72 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_BayerRG10Packed = "BayerRG10Packed";
//#line 73 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_BayerGB10Packed = "BayerGB10Packed";
//#line 74 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_BayerBG10Packed = "BayerBG10Packed";
//#line 75 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_BayerGR12Packed = "BayerGR12Packed";
//#line 76 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_BayerRG12Packed = "BayerRG12Packed";
//#line 77 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_BayerGB12Packed = "BayerGB12Packed";
//#line 78 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_BayerBG12Packed = "BayerBG12Packed";
//#line 79 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_RGB8Packed = "RGB8Packed";
//#line 80 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_BGR8Packed = "BGR8Packed";
//#line 84 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Off = "Off";
//#line 85 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Once = "Once";
//#line 86 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Auto = "Continuous";
//#line 90 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Red = "Red";
//#line 91 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Blue = "Blue";
//#line 95 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Normal = "Normal";
//#line 96 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Invert = "Invert";
//#line 100 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_PtpOff = "Off";
//#line 101 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_PtpSlave = "Slave";
//#line 102 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_PtpMaster = "Master";
//#line 103 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_PtpAuto = "Auto";
//#line 107 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_SyncIn1 = "SyncIn1";
//#line 108 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_SyncIn2 = "SyncIn2";
//#line 109 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_SyncIn3 = "SyncIn3";
//#line 110 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_SyncIn4 = "SyncIn4";
//#line 114 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_SyncOut1 = "SyncOut1";
//#line 115 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_SyncOut2 = "SyncOut2";
//#line 116 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_SyncOut3 = "SyncOut3";
//#line 117 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_SyncOut4 = "SyncOut4";
//#line 121 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_GPO = "GPO";
//#line 122 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_AcquisitionTriggerReady = "AcquisitionTriggerReady";
//#line 123 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_FrameTriggerReady = "FrameTriggerReady";
//#line 124 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_FrameTrigger = "FrameTrigger";
//#line 125 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Exposing = "Exposing";
//#line 126 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_FrameReadout = "FrameReadout";
//#line 127 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Imaging = "Imaging";
//#line 128 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Acquiring = "Acquiring";
//#line 129 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_LineIn1 = "LineIn1";
//#line 130 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_LineIn2 = "LineIn2";
//#line 134 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_USBLine0 = "Line0";
//#line 135 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_USBLine1 = "Line1";
//#line 136 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_USBLine2 = "Line2";
//#line 137 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_USBLine3 = "Line3";
//#line 141 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Output = "Output";
//#line 142 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Input = "Input";
//#line 146 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Mean = "Mean";
//#line 147 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_FitRange = "FitRange";
//#line 151 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_Timed = "Timed";
//#line 152 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_TriggerWidth = "TriggerWidth";
//#line 153 "/home/artur/PycharmProjects/2042_sensor_testing/catkin_ws/src/avt_vimba_camera/cfg/AvtVimbaCamera.cfg"
      const char * const AvtVimbaCamera_PieceWiseLinearHDR = "PieceWiseLinearHDR";
}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __AVTVIMBACAMERARECONFIGURATOR_H__
