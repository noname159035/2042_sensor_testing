# test_runner.py
# –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É catkin_make –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–∞ –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
# –ö–æ–º–∞–Ω–¥–∞ catkin_make —Ç–∞–∫ –∂–µ –Ω—É–∂–Ω–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞
import subprocess
from sensor_library import get_sensor
import os
import subprocess
import time

def run_test(sensor_type: str, sensor_name: str):
    sensor = get_sensor(sensor_type, sensor_name)
    if not sensor:
        return f"–î–∞—Ç—á–∏–∫ {sensor_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–∏–ø–∞ {sensor_type}"

    # –ü—É—Ç–∏
    catkin_ws = os.environ.get("CATKIN_WS", os.path.join(os.path.abspath(os.path.dirname(__file__)), "catkin_ws"))
    catkin_setup = os.path.join(catkin_ws, "devel", "setup.bash")
    sensor_pkg = sensor["ros_pkg"]
    launch_file = sensor.get("launch_file", "scene_17.launch")
    test_scene = sensor.get("test_scene", "scene_17")

    # –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ ROS-—Å—Ü–µ–Ω—ã
    roslaunch_cmd = f"source {catkin_setup} && roslaunch {sensor_pkg} {launch_file}"

    try:
        # –ó–∞–ø—É—Å–∫ Gazebo —Å—Ü–µ–Ω—ã —Å ROS-–¥–∞—Ç—á–∏–∫–æ–º
        print(f"–ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω—ã {test_scene} –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ {sensor_name}...")
        subprocess.Popen(["bash", "-c", roslaunch_cmd])

        # –ü–æ–¥–æ–∂–¥–µ–º, —á—Ç–æ–±—ã —Å—Ü–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
        time.sleep(5)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ç–µ—Å—Ç-—Å–∫—Ä–∏–ø—Ç—É
        test_script_name = f"test_{sensor_type.lower()}_{sensor_name.lower()}.py"
        test_script_path = os.path.join(catkin_ws, "src", sensor_pkg, "scripts", test_script_name)

        if os.path.exists(test_script_path):
            print(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_script_name}")
            subprocess.Popen(["python3", test_script_path])
        else:
            print(f"[!] –¢–µ—Å—Ç-—Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_script_path}")

        return f"–¢–µ—Å—Ç '{test_script_name}' –∑–∞–ø—É—â–µ–Ω (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç). –°—Ü–µ–Ω–∞: {test_scene}."

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞: {e}"



def kill_gazebo():
    try:
        subprocess.run(["pkill", "-f", "gzserver"], check=False)
        subprocess.run(["pkill", "-f", "gzclient"], check=False)
        print("üîÅ Gazebo –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ.")
    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ Gazebo:", e)
